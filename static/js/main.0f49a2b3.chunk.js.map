{"version":3,"sources":["logo.svg","BillAmount.jsx","TipSelection.jsx","NumberPeople.jsx","Display.jsx","Calculator.jsx","index.js"],"names":["BillAmount","onValueChange","inputName","id","htmlFor","className","name","type","inputMode","placeholder","onChange","evt","value","Number","target","valueOf","TipSelection","resetFunc","customEltName","customEltInput","React","useRef","useState","activeItem","setActiveItem","handleTip","current","map","item","onClick","ref","NumberPeople","isInteger","Display","tipPart","totalPart","onReset","isEmpty","resultList","title","toFixed","Calculator","tipSelectionResetFunc","initialState","billAmount","tipPercent","nbPeople","state","setState","calculate","newBillAmount","newTipPercent","newNbPeople","newState","totalTip","func","ReactDOM","render","StrictMode","src","imgLogo","alt","document","getElementById"],"mappings":"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","file":"static/js/main.0f49a2b3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.3cc0528b.svg\";","import React from 'react';\n\nconst BillAmount = ({onValueChange}) => {\n  const handleChange = (evt) => {\n    const value = Number(evt.target.value).valueOf();\n    onValueChange(value >= 0 ? value : 0);\n  }\n  const inputName = 'amount';\n  return (\n    <div id='bill-amount'>\n      <label htmlFor={inputName} className='section-title'>Bill</label>\n      <input name={inputName}\n             id={inputName}\n             type='number'\n             inputMode='numeric'\n             placeholder='0'\n             onChange={handleChange}\n             className='calc-input'\n      />\n    </div>\n  );\n}\n\nexport default BillAmount;\n","import React from 'react';\n\nconst TipSelection = ({onValueChange, resetFunc}) => {\n  const buttonList = [\n    {name:'tip5', value:5},\n    {name:'tip10', value:10},\n    {name:'tip15', value:15},\n    {name:'tip25', value:25},\n    {name:'tip50', value:50}\n  ];\n  const customEltName = 'tipCustom';\n  const customEltInput = React.useRef();\n\n  const [activeItem, setActiveItem] = React.useState('');\n  resetFunc( () => setActiveItem('') );\n\n  const handleTip = (evt) => {\n    setActiveItem(evt.target.name);\n    if (evt.target.name !== customEltName) {\n      customEltInput.current.value = '';\n    }\n    const value = Number(evt.target.value).valueOf();\n    onValueChange(((value > 0) && (value <= 100)) ? value : 0);\n  }\n\n  return (\n    <div id='tip-selection'>\n      <p className='section-title'>Select Tip %</p>\n      <div id='tips'>        \n        {buttonList.map((item) =>\n          <button key={item.name}\n                  name={item.name}\n                  type='button'\n                  value={item.value}\n                  onClick={handleTip}\n                  className={'tip-item tip-button' + ((activeItem === item.name) ? ' active' : '')}\n          >{item.value}%</button>\n        )}\n        <input name={customEltName}\n              ref={customEltInput}\n              type='number'\n              inputMode='numeric'\n              placeholder='Custom'\n              onChange={handleTip}\n              className={'calc-input tip-item tip-custom' + ((activeItem === customEltName) ? ' active' : '')}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default TipSelection;\n","import React from 'react';\n\nconst NumberPeople = ({onValueChange}) => {\n  const handleChange = (evt) => {\n    const value = Number(evt.target.value).valueOf();\n    onValueChange((Number.isInteger(value) && (value > 0)) ? value : 0);\n  }\n  const inputName = 'people';\n  return (\n    <div id='number-people'>\n      <label htmlFor={inputName} className='section-title'>Number of People</label>\n      <input name={inputName}\n             id={inputName}\n             type='number'\n             inputMode='numeric'\n             placeholder='0'\n             onChange={handleChange}\n             className='calc-input'\n      />\n    </div>\n  );\n}\n\nexport default NumberPeople;\n","import React from 'react';\n\nconst Display = ({tipPart, totalPart, onReset, isEmpty}) => {\n  const resultList = [\n    {title:'Tip Amount', value:tipPart},\n    {title:'Total', value:totalPart}\n  ];\n  const formatAmount = (value) => '$' + Number(value).toFixed(2);\n  return (\n    <div id='display'>        \n      {resultList.map((item) =>\n        <div className='result' key={item.title}>\n          <p className='result-title'>\n            <span>{item.title}</span>\n            / person\n          </p>\n          <p className='result-value'>{formatAmount(item.value)}</p>\n        </div>\n      )}\n      <button type='reset'\n              onClick={onReset}\n              className={'reset-button' + (isEmpty ? '' : ' active')}\n      >Reset</button>\n    </div>\n  );\n}\n\nexport default Display;\n","import React from 'react';\nimport BillAmount from './BillAmount';\nimport TipSelection from './TipSelection';\nimport NumberPeople from './NumberPeople';\nimport Display from './Display';\n\nfunction Calculator() {\n  const initialState = {\n    billAmount: null,\n    tipPercent: null,\n    nbPeople: null,\n    tipPart: 0,\n    totalPart: 0,\n    isEmpty: true\n  }\n  const [state, setState] = React.useState(initialState);\n\n  // Handling state update\n  function calculate({newBillAmount, newTipPercent, newNbPeople}) {\n    const newState = {...state};\n    newState.isEmpty = false;\n    newState.billAmount = newBillAmount ?? state.billAmount;\n    newState.tipPercent = newTipPercent ?? state.tipPercent;\n    newState.nbPeople = newNbPeople ?? state.nbPeople;    \n    const totalTip = newState.billAmount * newState.tipPercent / 100.0; \n    newState.tipPart = (newState.nbPeople > 0) ? (totalTip / newState.nbPeople) : 0;\n    newState.totalPart = (newState.nbPeople > 0) ? ((newState.billAmount + totalTip) / newState.nbPeople) : 0;\n    setState(newState);\n  }\n  const handleBillAmount = (value) => calculate({newBillAmount: value});\n  const handleTipPercent = (value) => calculate({newTipPercent: value});\n  const handleNbPeople = (value) => calculate({newNbPeople: value});\n\n  // Handling form reset\n  let tipSelectionResetFunc;\n  function setTipSelectResetFunc(func) {\n    tipSelectionResetFunc = func;\n  }\n  function resetForm() {\n    setState(initialState);\n    tipSelectionResetFunc();\n  }\n\n  return (\n    <form id='calculator'>\n      <BillAmount onValueChange={handleBillAmount} />\n      <TipSelection onValueChange={handleTipPercent} resetFunc={setTipSelectResetFunc} />\n      <NumberPeople onValueChange={handleNbPeople} />\n      <Display tipPart={state.tipPart} totalPart={state.totalPart} onReset={resetForm} isEmpty={state.isEmpty} />\n    </form>\n  );\n}\n\nexport default Calculator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport imgLogo from './logo.svg'\nimport Calculator from './Calculator'\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <header className='app-logo'><img src={imgLogo} alt=\"App logo\" /></header>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}